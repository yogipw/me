const NoGamepassIdMessage = "No gamepassId was provided. Please provide a gamepassId manually",
    NouserIdMessage = "No userId was provided. Please provide a userId manually",
    NoGroupIdMessage = "No groupId was provided. Please provide a groupId manually",
    NoAssetIdMessage = "No assetId was provided. Please provide a assetId manually",
    NoBadgeIdMessage = "No badgeId was provided. Please provide a badgeId manually",
    NoGameIdMessage = "No gameId was provided. Please provide a gameId manually",
    fetch = require("node-fetch"),
    avatarInfo = async e => {
        let s = parseInt(e);
        return s ? JSON.parse(await fetch(`https://avatar.roblox.com/v1/users/${s}/avatar`).then(e => e.text()).then(e => e.toString().includes('"scales":') ? e : `No Data Found For Avatar ${s}.`).catch(e => {
            console.error(e)
        })) : NouserIdMessage
    }, groupInfo = async e => {
        let s = parseInt(e);
        return s ? await fetch(`https://groups.roblox.com/v2/groups?groupIds=${s}`).then(e => e.text()).then(e => e.toString().includes('"data":') ? JSON.parse(e).data[0] : `No Group Information Found For Group ${s}`).catch(e => {
            console.error(e)
        }) : NoGroupIdMessage
    }, userFriends = async e => {
        let s = parseInt(e);
        return s ? JSON.parse(await fetch(`https://api.roblox.com/users/${s}/friends`).then(e => e.text()).then(e => e.toString().includes('"Username"') ? e : `No Friends Information Found For ${s}`).catch(e => {
            console.error(e)
        })) : NouserIdMessage
    }, badgeInfo = async e => {
        let s = parseInt(e);
        return s ? JSON.parse(await fetch(`https://badges.roblox.com/v1/badges/${s}`).then(e => e.text()).then(e => e.toString().includes('"id":') ? e : `No Data Found For Badge ${s}.`).catch(e => {
            console.error(e)
        })) : NoBadgeIdMessage
    }, profileInfo = async e => {
        let s = parseInt(e);
        return s ? JSON.parse(await fetch(`https://www.roblox.com/users/profile/playergames-json?userId=${s}`).then(e => e.text()).then(e => e.toString().includes('"Title":"Experiences"') ? e : `No Data Found For User ${s}.`).catch(e => {
            console.error(e)
        })) : NouserIdMessage
    }, profilePic = async e => {
        let s = parseInt(e);
        return s ? await fetch(`https://www.roblox.com/headshot-thumbnail/json?userId=${s}&width=420&height=420`).then(e => e.text()).then(e => e.toString().includes('"Url":') ? JSON.parse(e).Url : `No Picture Found For User ${s}`).catch(e => {
            console.error(e)
        }) : NouserIdMessage
    }, gameThumbnail = async e => {
        let s = parseInt(e);
        return s ? await fetch(`https://www.roblox.com/asset-thumbnail/json?assetId=${s}&width=420&height=420&format=png`).then(e => e.text()).then(e => e.toString().includes('"Url":') ? JSON.parse(e).Url : void console.error(`No Game Thumnail Found For Game ${s}`)).catch(e => {
            console.error(e)
        }) : NoGameIdMessage
    }, groupIcon = async e => {
        let s = parseInt(e);
        return s ? await fetch(`https://thumbnails.roblox.com/v1/groups/icons?groupIds=${s}&size=420x420&format=Png&isCircular=false`).then(e => e.text()).then(e => e.toString().includes('"imageUrl":') ? JSON.parse(e).data[0].imageUrl : `No Group Icon/Logo Found For ${s}`).catch(e => {
            console.error(e)
        }) : NoGroupIdMessage
    }, gamepassIcon = async e => {
        let s = parseInt(e);
        return s ? await fetch(`https://thumbnails.roblox.com/v1/game-passes?gamePassIds=${s}&size=150x150&format=Png&isCircular=false`).then(e => e.text()).then(e => e.toString().includes('"imageUrl":') ? JSON.parse(e).data[0].imageUrl : `No Gamepass Found For ${s}`).catch(e => {
            console.error(e)
        }) : NoGamepassIdMessage
    }, assetIcon = async e => {
        let s = parseInt(e);
        return s ? await fetch(`https://thumbnails.roblox.com/v1/assets?assetIds=${s}&returnPolicy=PlaceHolder&size=420x420&format=Png&isCircular=false`).then(e => e.text()).then(e => e.toString().includes('"imageUrl":') ? JSON.parse(e).data[0].imageUrl : `No Asset Icon/Logo For ${s}`).catch(e => {
            console.error(e)
        }) : NoAssetIdMessage
    }, userRoles = async e => {
        let s = parseInt(e);
        return s ? await fetch(`https://groups.roblox.com/v2/users/${s}/groups/roles`).then(e => e.text()).then(e => e.toString().includes("data") ? JSON.parse(e).data : `No Information For ${s}`).catch(e => {
            console.error(e)
        }) : NouserIdMessage
    }, userByName = async e => {
        let s = e.toString();
        return s ? await fetch(`https://api.roblox.com/users/get-by-username?username=${s}`).then(e => e.text()).then(e => e.toString().includes("Id") ? JSON.parse(e) : `No Information Found For ${s}`).catch(e => {
            console.error(e)
        }) : NouserIdMessage
    }, assetOwnership = async (e, s) => {
        let t = e.toString();
        return t ? await fetch(`https://api.roblox.com/ownership/hasasset?userId=${e}&assetId=${s}`).then(e => e.text()).then(e => e || `No Information Found For ${t}`).catch(e => {
            console.error(e)
        }) : NoAssetIdMessage
    }, assetInfo = async e => {
        let s = parseInt(e);
        return s ? await fetch(`https://www.roblox.com/item-thumbnails?params=[{assetId:${s}}]`).then(e => e.text()).then(e => {
            if (e.toString().includes('"id":')) {
                let s = JSON.parse(e)[0];
                return {
                    id: s.id,
                    name: s.name,
                    url: s.url,
                    thumbnailUrl: s.thumbnailUrl
                }
            }
            return `No Data Found For Asset ${s}.`
        }).catch(e => {
            console.error(e)
        }) : NouserIdMessage
    }, gameIcon = async e => {
        let s = parseInt(e);
        return s ? await fetch(`https://www.roblox.com/item-thumbnails?params=[{assetId:${s}}]`).then(e => e.text()).then(e => e.toString().includes('"id":') ? JSON.parse(e)[0].thumbnailUrl : `No Icon Found For Game ${s}.`).catch(e => {
            console.error(e)
        }) : NoGameIdMessage
    }, gameInfo = async e => {
        let s = parseInt(e);
        return s ? await fetch(`https://www.roblox.com/item-thumbnails?params=[{assetId:${s}}]`).then(e => e.text()).then(e => e.toString().includes('"id":') ? JSON.parse(e)[0] : `No Icon Found For Game ${s}.`).catch(e => {
            console.error(e)
        }) : NoGameIdMessage
    };

function robloxBadges(e) {
    return Id = parseInt(e), Id ? fetch(`https://accountinformation.roblox.com/v1/users/${Id}/roblox-badges`).then(e => e.json()).then(e => e) : NouserIdMessage
}

function userStatus(e) {
    return Id = parseInt(e), Id ? fetch(`https://users.roblox.com/v1/users/${Id}/status`).then(e => e.json()).then(e => e.status) : NouserIdMessage
}

function canManageAsset(e, s) {
    return Id = parseInt(e), s = parseInt(s), Id ? s ? fetch(`https://api.roblox.com/users/${Id}/canmanage/${s}`).then(e => e.json()).then(e => e.CanManage) : "No assetId provided" : NouserIdMessage
}

function primaryGroup(e) {
    return e ? (Id = parseInt(e), fetch(`https://groups.roblox.com/v1/users/${Id}/groups/primary/role`).then(e => e.json()).then(e => {
        if (e) return e
    })) : NouserIdMessage
}

function groupUsers(e) {
    if (!e) return NoGroupIdMessage;
    let s = parseInt(e);
    return fetch(`https://groups.roblox.com/v1/groups/${s}/users?sortOrder=Asc&limit=10`).then(e => e.json()).then(e => e.data)
}

function groupIdByName(e) {
    if (!e) return "No Group Name provided";
    let s = e.toString();
    return fetch(`https://groups.roblox.com/v1/groups/search/lookup?groupName=${s}`).then(e => e.json()).then(e => e ? e.data[0].id : "No Data Found")
}

function assetFavorites(e) {
    if (!e) return NoAssetIdMessage;
    let s = parseInt(e);
    return fetch(`https://catalog.roblox.com/v1/favorites/assets/${s}/count`).then(e => e.json()).then(e => e)
}

function canViewInventory(e) {
    if (!e) return NoUserIdMessage;
    let s = parseInt(e);
    fetch(`https://inventory.roblox.com/v1/users/${s}/can-view-inventory`).then(e => e.json()).then(e => {
        console.log(e.canView)
    })
}

function isOnline(e) {
    if (!e) return NoUserIdMessage;
    let s = parseInt(e);
    return fetch(`https://api.roblox.com/users/${s}/onlinestatus/`).then(e => e.json()).then(e => e.IsOnline)
}

function userNameHistory(e) {
    if (!e) return NoUserIdMessage;
    let s = parseInt(e);
    return fetch(`https://users.roblox.com/v1/users/${s}/username-history?limit=10&sortOrder=Desc`).then(e => e.json()).then(e => e.data)
}

function displayName(e) {
    const s = parseInt(e);
    return fetch(`https://users.roblox.com/v1/users/${s}`).then(e => e.json()).then(e => e.displayName)
}

function userInfo(e) {
    const s = parseInt(e);
    return fetch(`https://users.roblox.com/v1/users/${s}`).then(e => e.json()).then(e => e)
}

function userName(e) {
    const s = parseInt(e);
    return fetch(`https://users.roblox.com/v1/users/${s}`).then(e => e.json()).then(e => e.name)
}
module.exports = {
    canViewInventory: canViewInventory,
    userNameHistory: userNameHistory,
    assetFavorites: assetFavorites,
    canManageAsset: canManageAsset,
    assetOwnership: assetOwnership,
    gameThumbnail: gameThumbnail,
    groupIdByName: groupIdByName,
    robloxBadges: robloxBadges,
    primaryGroup: primaryGroup,
    gamepassIcon: gamepassIcon,
    userFriends: userFriends,
    profileInfo: profileInfo,
    displayName: displayName,
    profilePic: profilePic,
    avatarInfo: avatarInfo,
    userByName: userByName,
    groupUsers: groupUsers,
    userStatus: userStatus,
    groupIcon: groupIcon,
    badgeInfo: badgeInfo,
    assetInfo: assetInfo,
    groupInfo: groupInfo,
    assetIcon: assetIcon,
    userRoles: userRoles,
    userName: userName,
    gameIcon: gameIcon,
    userInfo: userInfo,
    gameInfo: gameInfo,
    isOnline: isOnline
};